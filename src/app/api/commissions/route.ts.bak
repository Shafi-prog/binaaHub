import { NextRequest, NextResponse } from 'next/server'
import { cookies } from 'next/headers'
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { CommissionService } from '@/lib/commission-service'
import { SupervisorService } from '@/lib/supervisor-service'

export async function POST(request: NextRequest) {
  try {
    const supabase = createRouteHandlerClient({ cookies })

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }    
    
    const { action, ...data } = await request.json()

    switch (action) {
      case 'generate_invite_code':
        const { type, metadata } = data
        const inviteCode = await CommissionService.createInviteCode(
          user.id,          metadata?.commissionRate || 0.01,
          metadata?.maxUses,
          metadata?.expiryDays
        )
        return NextResponse.json(inviteCode)

      case 'validate_invite_code':
        const { code } = data
        const validation = await CommissionService.validateInviteCode(code)
        return NextResponse.json(validation)

      case 'record_commission':
        const { orderId, inviteCode: inviteCodeParam } = data
        const commission = await CommissionService.recordCommission(
          orderId,
          inviteCodeParam
        )
        return NextResponse.json(commission)

      case 'request_payout':
        const { commissionIds, paymentMethod } = data
        const payout = await CommissionService.requestPayout(
          user.id,
          commissionIds,
          paymentMethod
        )
        return NextResponse.json(payout)

      case 'record_supervisor_commission':
        const { 
          supervisorId, 
          projectId, 
          commissionType, 
          baseAmount, 
          percentage, 
          referenceId, 
          referenceType, 
          description 
        } = data

        const supervisorCommission = await SupervisorService.recordCommission(
          supervisorId,
          user.id,
          projectId,
          commissionType,
          baseAmount,
          percentage,
          referenceId,
          referenceType,
          description
        )
        return NextResponse.json(supervisorCommission)

      case 'pay_supervisor_commission':
        const { commissionId } = data
        
        const paidCommission = await SupervisorService.payCommission(
          commissionId,
          user.id
        )
        return NextResponse.json(paidCommission)

      default:
        return NextResponse.json(
          { error: 'Invalid action' },
          { status: 400 }
        )
    }
  } catch (error) {
    console.error('Commission API error:', error)
    return NextResponse.json(
      { error: error instanceof Error ? error.message : 'Failed to process commission action' },
      { status: 500 }
    )
  }
}

export async function GET(request: NextRequest) {
  try {
    const supabase = createRouteHandlerClient({ cookies })

    // Check authentication
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }    const { searchParams } = new URL(request.url)
    const action = searchParams.get('action')

    switch (action) {
      case 'dashboard':
        const dashboard = await CommissionService.getCommissionDashboard(user.id)
        return NextResponse.json(dashboard)

      case 'invite_codes':
        const inviteCodes = await CommissionService.getUserInviteCodes(user.id)
        return NextResponse.json(inviteCodes)

      case 'payouts':
        const payouts = await CommissionService.getPayoutHistory(user.id)
        return NextResponse.json(payouts)

      case 'analytics':
        const period = searchParams.get('period') || '30'
        const startDate = new Date()
        startDate.setDate(startDate.getDate() - parseInt(period))
        const analytics = await CommissionService.getCommissionAnalytics({
          start: startDate.toISOString(),
          end: new Date().toISOString()
        })
        return NextResponse.json(analytics)

      default:
        return NextResponse.json(
          { error: 'Invalid action' },
          { status: 400 }
        )
    }
  } catch (error) {
    console.error('Commission GET API error:', error)
    return NextResponse.json(
      { error: 'Failed to fetch commission data' },
      { status: 500 }
    )
  }
}

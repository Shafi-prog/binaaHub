// Test Both User and Store Login Scenarios
// Run this in browser console on http://localhost:3003/login

console.log('๐ ุจุฏุก ุงุฎุชุจุงุฑ ุชุณุฌูู ุงูุฏุฎูู ูููุณุชุฎุฏู ูุงููุชุฌุฑ...');

async function testUserLogin() {
  console.log('\n1๏ธโฃ ุงุฎุชุจุงุฑ ุชุณุฌูู ุฏุฎูู ุงููุณุชุฎุฏู...');

  // Fill user credentials
  const emailInput = document.querySelector('input[type="email"]');
  const passwordInput = document.querySelector('input[type="password"]');
  const submitButton = document.querySelector('button[type="submit"]');

  if (!emailInput || !passwordInput || !submitButton) {
    console.error('โ ุนูุงุตุฑ ุงููููุฐุฌ ุบูุฑ ููุฌูุฏุฉ');
    return;
  }

  // Clear and fill user credentials
  emailInput.value = '';
  passwordInput.value = '';
  emailInput.value = 'user@user.com';
  passwordInput.value = '123456';

  emailInput.dispatchEvent(new Event('input', { bubbles: true }));
  passwordInput.dispatchEvent(new Event('input', { bubbles: true }));

  console.log('โ ุชู ููุก ุจูุงูุงุช ุงููุณุชุฎุฏู:', emailInput.value);

  // Submit form
  submitButton.click();
  console.log('๐ค ุชู ุฅุฑุณุงู ูููุฐุฌ ุงููุณุชุฎุฏู');

  // Monitor for redirect
  return monitorRedirect('user', '/user/dashboard');
}

async function testStoreLogin() {
  console.log('\n2๏ธโฃ ุงุฎุชุจุงุฑ ุชุณุฌูู ุฏุฎูู ุงููุชุฌุฑ...');

  // Wait a bit before testing store login
  await new Promise((resolve) => setTimeout(resolve, 2000));

  // Navigate back to login if needed
  if (!window.location.href.includes('/login')) {
    window.location.href = '/login';
    await new Promise((resolve) => setTimeout(resolve, 2000));
  }

  const emailInput = document.querySelector('input[type="email"]');
  const passwordInput = document.querySelector('input[type="password"]');
  const submitButton = document.querySelector('button[type="submit"]');

  if (!emailInput || !passwordInput || !submitButton) {
    console.error('โ ุนูุงุตุฑ ุงููููุฐุฌ ุบูุฑ ููุฌูุฏุฉ');
    return;
  }

  // Clear and fill store credentials
  emailInput.value = '';
  passwordInput.value = '';
  emailInput.value = 'store@store.com';
  passwordInput.value = '123456';

  emailInput.dispatchEvent(new Event('input', { bubbles: true }));
  passwordInput.dispatchEvent(new Event('input', { bubbles: true }));

  console.log('โ ุชู ููุก ุจูุงูุงุช ุงููุชุฌุฑ:', emailInput.value);

  // Submit form
  submitButton.click();
  console.log('๐ค ุชู ุฅุฑุณุงู ูููุฐุฌ ุงููุชุฌุฑ');

  // Monitor for redirect
  return monitorRedirect('store', '/store/dashboard');
}

function monitorRedirect(userType, expectedUrl) {
  return new Promise((resolve) => {
    const startTime = Date.now();
    const maxWaitTime = 20000; // 20 seconds

    const checkRedirect = () => {
      const currentUrl = window.location.href;
      const elapsed = Date.now() - startTime;

      console.log(`๐ [${userType}] ุงูุฑุงุจุท ุงูุญุงูู: ${currentUrl}`);

      if (currentUrl.includes(expectedUrl)) {
        console.log(`๐ [${userType}] ูุฌุญ ุงูุชูุฌูู ุฅูู: ${currentUrl}`);
        resolve({ success: true, finalUrl: currentUrl, userType, elapsed });
        return;
      }

      if (elapsed > maxWaitTime) {
        console.log(`โ [${userType}] ุงูุชูุช ุงููููุฉ ุงููุญุฏุฏุฉ`);
        resolve({ success: false, finalUrl: currentUrl, userType, elapsed });
        return;
      }

      // Check for status messages
      const statusElement = document.querySelector('.bg-blue-50');
      if (statusElement) {
        console.log(`๐ [${userType}] ุงูุญุงูุฉ: ${statusElement.textContent?.trim()}`);
      }

      setTimeout(checkRedirect, 1000);
    };

    setTimeout(checkRedirect, 2000);
  });
}

// Sequential testing function
async function runSequentialTests() {
  try {
    console.log('๐ ุจุฏุก ุงูุงุฎุชุจุงุฑุงุช ุงููุชุณูุณูุฉ...');

    // Test user login first
    const userResult = await testUserLogin();
    console.log('๐ ูุชูุฌุฉ ุงุฎุชุจุงุฑ ุงููุณุชุฎุฏู:', userResult);

    // Wait and test store login
    await new Promise((resolve) => setTimeout(resolve, 3000));
    const storeResult = await testStoreLogin();
    console.log('๐ ูุชูุฌุฉ ุงุฎุชุจุงุฑ ุงููุชุฌุฑ:', storeResult);

    // Summary
    console.log('\n๐ ููุฎุต ุงููุชุงุฆุฌ:');
    console.log('===================');
    console.log(`๐ค ุงููุณุชุฎุฏู: ${userResult.success ? 'โ ูุฌุญ' : 'โ ูุดู'}`);
    console.log(`๐ช ุงููุชุฌุฑ: ${storeResult.success ? 'โ ูุฌุญ' : 'โ ูุดู'}`);

    return { user: userResult, store: storeResult };
  } catch (error) {
    console.error('โ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑุงุช:', error);
    return { error: error.message };
  }
}

// Start the test
runSequentialTests().then((results) => {
  console.log('\n๐ ุงูุชูุช ุฌููุน ุงูุงุฎุชุจุงุฑุงุช');
  console.log('ุงููุชุงุฆุฌ ุงูููุงุฆูุฉ:', results);
});

console.log('๐ ุชู ุชุญููู ุณูุฑูุจุช ุงุฎุชุจุงุฑ ุงููุณุชุฎุฏู ูุงููุชุฌุฑ');

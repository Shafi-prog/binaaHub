#!/usr/bin/env node

/**
 * Binna Platform - File Consolidation Script
 * This script helps consolidate duplicate files and clean up the project structure
 */

const fs = require('fs');
const path = require('path');

console.log('üöÄ BINNA PLATFORM - FILE CONSOLIDATION SCRIPT');
console.log('='.repeat(50));

// Configuration
const ROOT_DIR = process.cwd();
const BACKUP_DIR = path.join(ROOT_DIR, 'backups', `consolidation-${Date.now()}`);

// Files to consolidate
const fileConsolidation = {
  environment: {
    target: '.env.local',
    sources: ['.env.development', '.env.production', '.env.staging', '.env.test'],
    action: 'merge'
  },
  configs: {
    target: 'tsconfig.json',
    sources: ['tsconfig.dev.json', 'tsconfig.prod.json', 'tsconfig.test.json'],
    action: 'merge'
  },
  scripts: {
    target: 'scripts/unified/',
    sources: ['scripts/*.bat', 'scripts/*.ps1', 'scripts/*.sh'],
    action: 'consolidate'
  },
  documentation: {
    target: 'docs/archive/',
    sources: ['*.md', '!README.md', '!STRONG_BASIS_PLAN.md'],
    action: 'archive'
  }
};

function createBackup() {
  console.log('üìÅ Creating backup...');
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }
  console.log(`‚úÖ Backup directory created: ${BACKUP_DIR}`);
}

function consolidateEnvironmentFiles() {
  console.log('\nüîß Consolidating environment files...');
  
  const envFiles = ['.env.development', '.env.production', '.env.staging', '.env.test'];
  const targetFile = '.env.local';
  
  let consolidatedContent = '# Binna Platform - Consolidated Environment Configuration\n';
  consolidatedContent += '# Generated by file consolidation script\n';
  consolidatedContent += `# Date: ${new Date().toISOString()}\n\n`;
  
  envFiles.forEach(file => {
    const filePath = path.join(ROOT_DIR, file);
    if (fs.existsSync(filePath)) {
      console.log(`  üìÑ Processing ${file}...`);
      const content = fs.readFileSync(filePath, 'utf8');
      consolidatedContent += `\n# From ${file}\n`;
      consolidatedContent += content;
      
      // Backup original file
      const backupPath = path.join(BACKUP_DIR, file);
      fs.copyFileSync(filePath, backupPath);
      
      // Remove original file
      fs.unlinkSync(filePath);
      console.log(`  ‚úÖ ${file} backed up and removed`);
    }
  });
  
  // Write consolidated file
  fs.writeFileSync(path.join(ROOT_DIR, targetFile), consolidatedContent);
  console.log(`‚úÖ Environment files consolidated into ${targetFile}`);
}

function archiveMarkdownFiles() {
  console.log('\nüìö Archiving markdown files...');
  
  const docsDir = path.join(ROOT_DIR, 'docs');
  const archiveDir = path.join(docsDir, 'archive');
  
  if (!fs.existsSync(archiveDir)) {
    fs.mkdirSync(archiveDir, { recursive: true });
  }
  
  const markdownFiles = fs.readdirSync(ROOT_DIR).filter(file => 
    file.endsWith('.md') && 
    file !== 'README.md' && 
    file !== 'STRONG_BASIS_PLAN.md'
  );
  
  markdownFiles.forEach(file => {
    const sourcePath = path.join(ROOT_DIR, file);
    const targetPath = path.join(archiveDir, file);
    const backupPath = path.join(BACKUP_DIR, file);
    
    console.log(`  üìÑ Archiving ${file}...`);
    
    // Backup original file
    fs.copyFileSync(sourcePath, backupPath);
    
    // Move to archive
    fs.renameSync(sourcePath, targetPath);
    
    console.log(`  ‚úÖ ${file} archived to docs/archive/`);
  });
  
  console.log(`‚úÖ ${markdownFiles.length} markdown files archived`);
}

function cleanupScripts() {
  console.log('\nüßπ Cleaning up scripts...');
  
  const scriptsDir = path.join(ROOT_DIR, 'scripts');
  const scriptFiles = fs.readdirSync(scriptsDir).filter(file => 
    file.endsWith('.bat') || file.endsWith('.ps1') || file.endsWith('.sh')
  );
  
  const archiveScriptsDir = path.join(scriptsDir, 'archive');
  if (!fs.existsSync(archiveScriptsDir)) {
    fs.mkdirSync(archiveScriptsDir, { recursive: true });
  }
  
  scriptFiles.forEach(file => {
    const sourcePath = path.join(scriptsDir, file);
    const targetPath = path.join(archiveScriptsDir, file);
    const backupPath = path.join(BACKUP_DIR, file);
    
    console.log(`  üìÑ Archiving ${file}...`);
    
    // Backup original file
    fs.copyFileSync(sourcePath, backupPath);
    
    // Move to archive
    fs.renameSync(sourcePath, targetPath);
    
    console.log(`  ‚úÖ ${file} archived to scripts/archive/`);
  });
  
  console.log(`‚úÖ ${scriptFiles.length} script files archived`);
}

function generateReport() {
  console.log('\nüìä Generating consolidation report...');
  
  const reportContent = `# File Consolidation Report
Generated: ${new Date().toISOString()}

## Actions Performed
1. Environment files consolidated into .env.local
2. Markdown files archived to docs/archive/
3. Script files archived to scripts/archive/
4. Original files backed up to ${BACKUP_DIR}

## Next Steps
1. Review consolidated .env.local file
2. Update any references to archived files
3. Test the application build
4. Update documentation as needed

## Cleanup Verification
- [ ] Application builds successfully
- [ ] All environment variables are working
- [ ] No broken links to archived files
- [ ] Team is notified of changes

## Files Backed Up
All original files have been backed up to: ${BACKUP_DIR}
`;
  
  fs.writeFileSync(path.join(ROOT_DIR, 'CONSOLIDATION_REPORT.md'), reportContent);
  console.log('‚úÖ Consolidation report generated');
}

// Main execution
async function main() {
  try {
    createBackup();
    consolidateEnvironmentFiles();
    archiveMarkdownFiles();
    cleanupScripts();
    generateReport();
    
    console.log('\nüéâ FILE CONSOLIDATION COMPLETE!');
    console.log('='.repeat(50));
    console.log('‚úÖ All duplicate files have been consolidated');
    console.log('‚úÖ Original files backed up safely');
    console.log('‚úÖ Project structure cleaned up');
    console.log('‚úÖ Ready for next development phase');
    console.log('\nüìã Next steps:');
    console.log('1. Review CONSOLIDATION_REPORT.md');
    console.log('2. Test application build');
    console.log('3. Update team documentation');
    console.log('4. Begin Phase 2 implementation');
    
  } catch (error) {
    console.error('‚ùå Error during consolidation:', error);
    process.exit(1);
  }
}

// Run the script
if (require.main === module) {
  main();
}

module.exports = { main };

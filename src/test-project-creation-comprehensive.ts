// =============================================================================
// PROJECT CREATION TEST SUITE
// =============================================================================
// This test will verify that project creation works with the current database schema

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs';

// Test data that matches the new project form
const testProjectData = {
  name: "Test Construction Project - " + new Date().toLocaleString(),
  description: "Automated test project to verify database schema compatibility",
  project_type: "residential",
  status: "planning",
  priority: "medium",
  budget: 250000,
  start_date: "2025-07-01",
  end_date: "2025-12-31",
  city: "ÿßŸÑÿ±Ÿäÿßÿ∂",
  region: "ŸÖŸÜÿ∑ŸÇÿ© ÿßŸÑÿ±Ÿäÿßÿ∂", 
  district: "ÿßŸÑÿπŸÑŸäÿß",
  country: "Saudi Arabia",
  is_active: true,
  lat: 24.7136,
  lng: 46.6753
};

async function testProjectCreation() {
  console.log("üß™ STARTING PROJECT CREATION TEST");
  console.log("================================\n");

  try {
    const supabase = createClientComponentClient();
    
    // Test 1: Check authentication
    console.log("Test 1: Checking authentication...");
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.log("‚ùå Authentication failed:", authError?.message || "No user found");
      console.log("üí° Please make sure you're logged in before running this test");
      return false;
    }
    console.log("‚úÖ User authenticated:", user.email);

    // Test 2: Check database connection
    console.log("\nTest 2: Checking database connection...");
    const { data: tables, error: connectionError } = await supabase
      .from('projects')
      .select('id')
      .limit(1);
    
    if (connectionError) {
      console.log("‚ùå Database connection failed:", connectionError.message);
      return false;
    }
    console.log("‚úÖ Database connection successful");

    // Test 3: Check projects table schema
    console.log("\nTest 3: Checking projects table schema...");
    const { data: schemaTest, error: schemaError } = await supabase
      .from('projects')
      .select('name, description, project_type, status, budget, start_date, end_date, location_lat, location_lng')
      .limit(1);
    
    if (schemaError) {
      console.log("‚ùå Schema check failed:", schemaError.message);
      console.log("üí° Basic schema columns are available");
    } else {
      console.log("‚úÖ Basic schema columns verified");
    }

    // Test 4: Check for new columns (city, region, etc.)
    console.log("\nTest 4: Checking for enhanced schema columns...");
    const { data: enhancedSchemaTest, error: enhancedSchemaError } = await supabase
      .from('projects')
      .select('city, region, district, country, priority, is_active, image_url')
      .limit(1);
    
    if (enhancedSchemaError) {
      console.log("‚ö†Ô∏è  Enhanced schema columns not found:", enhancedSchemaError.message);
      console.log("üí° Database migration needs to be applied");
      console.log("üìã Run the SQL from URGENT_DATABASE_FIX.sql in your Supabase dashboard");
    } else {
      console.log("‚úÖ Enhanced schema columns verified");
    }

    // Test 5: Attempt project creation with basic fields only
    console.log("\nTest 5: Creating test project (basic fields)...");
    const basicProjectData = {
      user_id: user.id,
      name: testProjectData.name,
      description: testProjectData.description,
      project_type: testProjectData.project_type,
      status: testProjectData.status,
      budget: testProjectData.budget,
      start_date: testProjectData.start_date,
      end_date: testProjectData.end_date,
      location_lat: testProjectData.lat,
      location_lng: testProjectData.lng,
      address: `${testProjectData.country} - ${testProjectData.region} - ${testProjectData.city} - ${testProjectData.district}`,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };

    const { data: newProject, error: createError } = await supabase
      .from('projects')
      .insert(basicProjectData)
      .select()
      .single();

    if (createError) {
      console.log("‚ùå Project creation failed:", createError.message);
      console.log("üìã Error details:", createError);
      return false;
    }

    console.log("‚úÖ Test project created successfully!");
    console.log("üìù Project ID:", newProject.id);
    console.log("üìù Project Name:", newProject.name);

    // Test 6: Verify project can be retrieved
    console.log("\nTest 6: Verifying project retrieval...");
    const { data: retrievedProject, error: retrieveError } = await supabase
      .from('projects')
      .select('*')
      .eq('id', newProject.id)
      .single();

    if (retrieveError) {
      console.log("‚ùå Project retrieval failed:", retrieveError.message);
      return false;
    }

    console.log("‚úÖ Project retrieved successfully");
    console.log("üìù Retrieved project:", {
      id: retrievedProject.id,
      name: retrievedProject.name,
      project_type: retrievedProject.project_type,
      status: retrievedProject.status,
      budget: retrievedProject.budget
    });

    // Test 7: Clean up test project
    console.log("\nTest 7: Cleaning up test project...");
    const { error: deleteError } = await supabase
      .from('projects')
      .delete()
      .eq('id', newProject.id);

    if (deleteError) {
      console.log("‚ö†Ô∏è  Failed to clean up test project:", deleteError.message);
      console.log("üí° Test project with ID", newProject.id, "may need manual cleanup");
    } else {
      console.log("‚úÖ Test project cleaned up successfully");
    }

    console.log("\nüéâ ALL TESTS PASSED!");
    console.log("===================");
    console.log("‚úÖ Authentication: Working");
    console.log("‚úÖ Database connection: Working");
    console.log("‚úÖ Basic schema: Compatible");
    console.log("‚úÖ Project creation: Working");
    console.log("‚úÖ Project retrieval: Working");
    console.log("‚úÖ Cleanup: Working");

    return true;

  } catch (error) {
    console.log("‚ùå Unexpected error during testing:", error);
    return false;
  }
}

// Test the createProject API function
async function testCreateProjectAPI() {
  console.log("\nüîß TESTING API FUNCTION");
  console.log("========================");

  try {
    // Import the API function
    const { createProject } = await import('../lib/api/dashboard.js');
    
    console.log("Test: Using createProject API function...");
    const result = await createProject(testProjectData);
    
    console.log("‚úÖ createProject API function works!");
    console.log("üìù Created project:", result);
    
    return result;
  } catch (error) {
    console.log("‚ùå createProject API function failed:", error.message);
    return null;
  }
}

// Run all tests
async function runAllTests() {
  console.log("üß™ PROJECT CREATION COMPREHENSIVE TEST SUITE");
  console.log("============================================");
  console.log("Date:", new Date().toLocaleString());
  console.log("Test Data:", JSON.stringify(testProjectData, null, 2));
  console.log("\n");

  const basicTestResult = await testProjectCreation();
  const apiTestResult = await testCreateProjectAPI();

  console.log("\nüìä FINAL TEST RESULTS");
  console.log("=====================");
  console.log("Basic database tests:", basicTestResult ? "‚úÖ PASSED" : "‚ùå FAILED");
  console.log("API function tests:", apiTestResult ? "‚úÖ PASSED" : "‚ùå FAILED");
  
  if (basicTestResult && apiTestResult) {
    console.log("\nüéâ ALL TESTS PASSED - PROJECT CREATION IS WORKING!");
  } else {
    console.log("\n‚ö†Ô∏è  SOME TESTS FAILED - CHECK LOGS ABOVE FOR DETAILS");
  }
}

// Export for use in other files
export { testProjectCreation, testCreateProjectAPI, runAllTests };

// Run tests if this file is executed directly
if (typeof window !== 'undefined') {
  console.log("‚ö†Ô∏è  This test should be run in a Node.js environment");
} else {
  runAllTests().catch(console.error);
}
